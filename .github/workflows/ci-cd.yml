name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build:all

      - name: Run tests
        run: npm test

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build:all

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to AWS
        run: npm run deploy:prod
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Get API URL
        id: get-api-url
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name ServerlessApiStack-prod \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiItemsApiprodEndpoint*`].OutputValue' \
            --output text)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT

      - name: Comment deployment info
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              per_page: 1
            });

            const commit = commits[0];
            const commitMessage = commit.commit.message.split('\n')[0]; // First line only

            const body = `ðŸš€ **Deployment successful!**

            **API URL:** ${{ steps.get-api-url.outputs.api_url }}

            **Environment:** Production
            **Commit:** ${context.sha.substring(0, 7)}
            **Message:** ${commitMessage}
            **Triggered by:** ${context.actor}
            **Deployed at:** ${new Date().toISOString()}`;

            // Try to comment on the commit
            try {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: body
              });
            } catch (error) {
              console.log('Could not create commit comment, but deployment was successful');
            }
